{
  "name": "moulin-dev-console-log",
  "displayName": "contextual-console-log",
  "description": "Generate contextual Console.log statements",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.101.0"
  },
  "categories": [
    "Other"
  ],
  "main": "./dist/activate.js",
  "contributes": {
    "commands": [
      {
        "command": "contextualConsoleLog.insertLog",
        "title": "Insert Contextual log",
        "category": "ccl"
      },
      {
        "command": "contextualConsoleLog.wrapInConsoleLog",
        "title": "Wrap log",
        "category": "ccl"
      },
      {
        "command": "contextualConsoleLog.cleanLogs",
        "title": "Remove Logs",
        "category": "ccl"
      },
      {
        "command": "contextualConsoleLog.insertLogForFile",
        "title": "Insert logs throughout the entire file",
        "category": "ccl"
      },
      {
        "command": "contextualConsoleLog.toggleLogging",
        "title": "Toggle Log Insertion",
        "category": "ccl"
      },
      {
        "command": "contextualConsoleLog.openTemplateEditor",
        "title": "Open Log Template Editor",
        "category": "ccl"
      }
    ],
    "keybindings": [
      {
        "command": "contextualConsoleLog.insertLog",
        "key": "ctrl+shift+l",
        "when": "editorTextFocus"
      }
    ],
    "configuration": {
      "title": "Contextual Console Log",
      "properties": {
        "contextualConsoleLog.logTemplate": {
          "type": "string",
          "default": "[${fileName} > ${functionName}]",
          "description": "Custom template for the log message prefix. Available variables: ${fileName}, ${functionName}."
        },
        "contextualConsoleLog.logLevel": {
          "type": "string",
          "default": "log",
          "description": "The logging level/method to use (e.g., 'log', 'warn', 'debug', 'info', 'customMethod')."
        },
        "contextualConsoleLog.logFunction": {
          "type": "string",
          "default": "console",
          "description": "The base logging function to use (e.g., 'console', 'myLogger'). For monorepos or custom setups, you can specify a global variable or a function available in the current scope."
        },
        "contextualConsoleLog.logItems": {
          "type": "array",
          "default": [
            "props",
            "state",
            "refs",
            "context",
            "reducers",
            "locals"
          ],
          "items": {
            "type": "string",
            "enum": [
              "props",
              "state",
              "refs",
              "context",
              "reducers",
              "locals",
              "args"
            ]
          },
          "description": "The items to include in the log."
        },
        "contextualConsoleLog.addDebugger": {
          "type": "boolean",
          "default": false,
          "description": "Insert a 'debugger;' statement along with the console log."
        },
        "contextualConsoleLog.enableClassMethodLogging": {
          "type": "boolean",
          "default": true,
          "description": "Enable logging for class methods (e.g., 'this.props', 'this.state')."
        },
        "contextualConsoleLog.enableHookLogging": {
          "type": "boolean",
          "default": true,
          "description": "Enable logging for variables within React hooks (useEffect, useMemo, useCallback)."
        },
        "contextualConsoleLog.logTag": {
          "type": "string",
          "default": "",
          "description": "A unique tag to identify logs inserted by the extension for easier cleanup. Example: '// @my-log-tag' or '/* LOG_TAG */'"
        },
        "contextualConsoleLog.wrapInDevCheck": {
          "type": "boolean",
          "default": false,
          "description": "Wrap inserted logs in an environment check (e.g., `if (process.env.NODE_ENV !== 'production')`)."
        },
        "contextualConsoleLog.showPreview": {
          "type": "boolean",
          "default": false,
          "description": "Show a preview of the log insertion before applying changes."
        },
        "contextualConsoleLog.enableTelemetry": {
          "type": "boolean",
          "default": true,
          "description": "Enable anonymous telemetry to help improve the extension."
        },
        "contextualConsoleLog.enableReduxContextLogging": {
          "type": "boolean",
          "default": false,
          "description": "Enable logging for Redux/Context stores (e.g., useSelector, useContext)."
        },
        "contextualConsoleLog.customLoggerImportStatement": {
          "type": "string",
          "default": "",
          "description": "Optional: A custom import statement for your logger (e.g., 'import { logger } from \"@my-org/logger\";'). If provided, this will be inserted at the top of the file."
        },
        "contextualConsoleLog.sensitiveKeys": {
          "type": "array",
          "default": [
            "password",
            "token",
            "secret",
            "api_key"
          ],
          "items": {
            "type": "string"
          },
          "description": "List of variable names to exclude from log generation."
        },
        "contextualConsoleLog.ignore": {
          "type": "array",
          "default": [],
          "description": "An array of glob patterns for files/folders to ignore. These patterns are in addition to .eslintignore and .prettierignore.",
          "items": {
            "type": "string"
          }
        },
        "contextualConsoleLog.filterUnusedVariables": {
          "type": "boolean",
          "default": true,
          "description": "Enable or disable filtering of unused variables from log suggestions."
        },
        "contextualConsoleLog.enableDuplicatePrevention": {
          "type": "boolean",
          "default": true,
          "description": "Enable or disable smart duplicate log prevention."
        }
      }
    },
    "activationEvents": [
      "onCommand:contextualConsoleLog.insertLog",
      "onCommand:contextualConsoleLog.wrapInConsoleLog",
      "onCommand:contextualConsoleLog.cleanLogs",
      "onCommand:contextualConsoleLog.insertLogForFile",
      "onCommand:contextualConsoleLog.openTemplateEditor"
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p tsconfig.json --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src --fix",
    "prettier:write": "prettier --write \"**/*.{ts,tsx,js,jsx,json,css,scss,md}\"",
    "test": "vscode-test",
    "coverage": "nyc --all --include='out/src/**/*.js' --extension .js --sourceMap=true --reporter=lcov --reporter=text vscode-test"
  },
  "devDependencies": {
    "@eslint/js": "9.29.0",
    "@istanbuljs/nyc-config-typescript": "^1.0.2",
    "@types/babel__traverse": "^7.20.7",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/vscode": "^1.101.0",
    "@typescript-eslint/eslint-plugin": "^8.31.1",
    "@typescript-eslint/parser": "^8.31.1",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.5.2",
    "esbuild": "^0.25.3",
    "eslint": "^9.25.1",
    "glob": "^11.0.3",
    "mocha": "^11.7.1",
    "npm-run-all": "^4.1.5",
    "nyc": "^17.1.0",
    "prettier": "3.6.2",
    "prettier-plugin-organize-imports": "^4.1.0",
    "typescript": "^5.8.3",
    "typescript-eslint": "8.35.0"
  },
  "dependencies": {
    "@babel/parser": "^7.27.5",
    "@babel/traverse": "^7.27.4"
  }
}
